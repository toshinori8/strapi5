"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws-sdk+middleware-flexible-checksums@3.750.0";
exports.ids = ["vendor-chunks/@aws-sdk+middleware-flexible-checksums@3.750.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.750.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getCrc32ChecksumAlgorithmFunction.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.750.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getCrc32ChecksumAlgorithmFunction.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCrc32ChecksumAlgorithmFunction = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs\");\nconst crc32_1 = __webpack_require__(/*! @aws-crypto/crc32 */ \"(rsc)/./node_modules/.pnpm/@aws-crypto+crc32@5.2.0/node_modules/@aws-crypto/crc32/build/module/index.js\");\nconst util_1 = __webpack_require__(/*! @aws-crypto/util */ \"(rsc)/./node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/module/index.js\");\nconst zlib = tslib_1.__importStar(__webpack_require__(/*! zlib */ \"zlib\"));\nclass NodeCrc32 {\n    checksum = 0;\n    update(data) {\n        this.checksum = zlib.crc32(data, this.checksum);\n    }\n    async digest() {\n        return (0, util_1.numToUint8)(this.checksum);\n    }\n    reset() {\n        this.checksum = 0;\n    }\n}\nconst getCrc32ChecksumAlgorithmFunction = () => {\n    if (typeof zlib.crc32 === \"undefined\") {\n        return crc32_1.AwsCrc32;\n    }\n    return NodeCrc32;\n};\nexports.getCrc32ChecksumAlgorithmFunction = getCrc32ChecksumAlgorithmFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGF3cy1zZGsrbWlkZGxld2FyZS1mbGV4aWJsZS1jaGVja3N1bXNAMy43NTAuMC9ub2RlX21vZHVsZXMvQGF3cy1zZGsvbWlkZGxld2FyZS1mbGV4aWJsZS1jaGVja3N1bXMvZGlzdC1janMvZ2V0Q3JjMzJDaGVja3N1bUFsZ29yaXRobUZ1bmN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlDQUF5QztBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxzRkFBTztBQUMvQixnQkFBZ0IsbUJBQU8sQ0FBQyxrSUFBbUI7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLCtIQUFrQjtBQUN6QyxrQ0FBa0MsbUJBQU8sQ0FBQyxrQkFBTTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy90b3NoL0RvY3VtZW50cy9QbGF0Zm9ybUlPL1Byb2plY3RzL3N0cmFwaTUvbm9kZV9tb2R1bGVzLy5wbnBtL0Bhd3Mtc2RrK21pZGRsZXdhcmUtZmxleGlibGUtY2hlY2tzdW1zQDMuNzUwLjAvbm9kZV9tb2R1bGVzL0Bhd3Mtc2RrL21pZGRsZXdhcmUtZmxleGlibGUtY2hlY2tzdW1zL2Rpc3QtY2pzL2dldENyYzMyQ2hlY2tzdW1BbGdvcml0aG1GdW5jdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0Q3JjMzJDaGVja3N1bUFsZ29yaXRobUZ1bmN0aW9uID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbmNvbnN0IGNyYzMyXzEgPSByZXF1aXJlKFwiQGF3cy1jcnlwdG8vY3JjMzJcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiQGF3cy1jcnlwdG8vdXRpbFwiKTtcbmNvbnN0IHpsaWIgPSB0c2xpYl8xLl9faW1wb3J0U3RhcihyZXF1aXJlKFwiemxpYlwiKSk7XG5jbGFzcyBOb2RlQ3JjMzIge1xuICAgIGNoZWNrc3VtID0gMDtcbiAgICB1cGRhdGUoZGF0YSkge1xuICAgICAgICB0aGlzLmNoZWNrc3VtID0gemxpYi5jcmMzMihkYXRhLCB0aGlzLmNoZWNrc3VtKTtcbiAgICB9XG4gICAgYXN5bmMgZGlnZXN0KCkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxfMS5udW1Ub1VpbnQ4KSh0aGlzLmNoZWNrc3VtKTtcbiAgICB9XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuY2hlY2tzdW0gPSAwO1xuICAgIH1cbn1cbmNvbnN0IGdldENyYzMyQ2hlY2tzdW1BbGdvcml0aG1GdW5jdGlvbiA9ICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHpsaWIuY3JjMzIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIGNyYzMyXzEuQXdzQ3JjMzI7XG4gICAgfVxuICAgIHJldHVybiBOb2RlQ3JjMzI7XG59O1xuZXhwb3J0cy5nZXRDcmMzMkNoZWNrc3VtQWxnb3JpdGhtRnVuY3Rpb24gPSBnZXRDcmMzMkNoZWNrc3VtQWxnb3JpdGhtRnVuY3Rpb247XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.750.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getCrc32ChecksumAlgorithmFunction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.750.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.750.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js ***!
  \*************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  CONFIG_REQUEST_CHECKSUM_CALCULATION: () => CONFIG_REQUEST_CHECKSUM_CALCULATION,\n  CONFIG_RESPONSE_CHECKSUM_VALIDATION: () => CONFIG_RESPONSE_CHECKSUM_VALIDATION,\n  ChecksumAlgorithm: () => ChecksumAlgorithm,\n  ChecksumLocation: () => ChecksumLocation,\n  DEFAULT_CHECKSUM_ALGORITHM: () => DEFAULT_CHECKSUM_ALGORITHM,\n  DEFAULT_REQUEST_CHECKSUM_CALCULATION: () => DEFAULT_REQUEST_CHECKSUM_CALCULATION,\n  DEFAULT_RESPONSE_CHECKSUM_VALIDATION: () => DEFAULT_RESPONSE_CHECKSUM_VALIDATION,\n  ENV_REQUEST_CHECKSUM_CALCULATION: () => ENV_REQUEST_CHECKSUM_CALCULATION,\n  ENV_RESPONSE_CHECKSUM_VALIDATION: () => ENV_RESPONSE_CHECKSUM_VALIDATION,\n  NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS: () => NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS,\n  NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS: () => NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS,\n  RequestChecksumCalculation: () => RequestChecksumCalculation,\n  ResponseChecksumValidation: () => ResponseChecksumValidation,\n  crc64NvmeCrtContainer: () => crc64NvmeCrtContainer,\n  flexibleChecksumsMiddleware: () => flexibleChecksumsMiddleware,\n  flexibleChecksumsMiddlewareOptions: () => flexibleChecksumsMiddlewareOptions,\n  getFlexibleChecksumsPlugin: () => getFlexibleChecksumsPlugin,\n  resolveFlexibleChecksumsConfig: () => resolveFlexibleChecksumsConfig\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/constants.ts\nvar RequestChecksumCalculation = {\n  /**\n   * When set, a checksum will be calculated for all request payloads of operations\n   * modeled with the {@link httpChecksum} trait where `requestChecksumRequired` is `true`\n   * AND/OR a `requestAlgorithmMember` is modeled.\n   * {@link https://smithy.io/2.0/aws/aws-core.html#aws-protocols-httpchecksum-trait httpChecksum}\n   */\n  WHEN_SUPPORTED: \"WHEN_SUPPORTED\",\n  /**\n   * When set, a checksum will only be calculated for request payloads of operations\n   * modeled with the {@link httpChecksum} trait where `requestChecksumRequired` is `true`\n   * OR where a `requestAlgorithmMember` is modeled and the user sets it.\n   * {@link https://smithy.io/2.0/aws/aws-core.html#aws-protocols-httpchecksum-trait httpChecksum}\n   */\n  WHEN_REQUIRED: \"WHEN_REQUIRED\"\n};\nvar DEFAULT_REQUEST_CHECKSUM_CALCULATION = RequestChecksumCalculation.WHEN_SUPPORTED;\nvar ResponseChecksumValidation = {\n  /**\n   * When set, checksum validation MUST be performed on all response payloads of operations\n   * modeled with the {@link httpChecksum} trait where `responseAlgorithms` is modeled,\n   * except when no modeled checksum algorithms are supported by an SDK.\n   * {@link https://smithy.io/2.0/aws/aws-core.html#aws-protocols-httpchecksum-trait httpChecksum}\n   */\n  WHEN_SUPPORTED: \"WHEN_SUPPORTED\",\n  /**\n   * When set, checksum validation MUST NOT be performed on response payloads of operations UNLESS\n   * the SDK supports the modeled checksum algorithms AND the user has set the `requestValidationModeMember` to `ENABLED`.\n   * It is currently impossible to model an operation as requiring a response checksum,\n   * but this setting leaves the door open for future updates.\n   */\n  WHEN_REQUIRED: \"WHEN_REQUIRED\"\n};\nvar DEFAULT_RESPONSE_CHECKSUM_VALIDATION = RequestChecksumCalculation.WHEN_SUPPORTED;\nvar ChecksumAlgorithm = /* @__PURE__ */ ((ChecksumAlgorithm3) => {\n  ChecksumAlgorithm3[\"MD5\"] = \"MD5\";\n  ChecksumAlgorithm3[\"CRC32\"] = \"CRC32\";\n  ChecksumAlgorithm3[\"CRC32C\"] = \"CRC32C\";\n  ChecksumAlgorithm3[\"CRC64NVME\"] = \"CRC64NVME\";\n  ChecksumAlgorithm3[\"SHA1\"] = \"SHA1\";\n  ChecksumAlgorithm3[\"SHA256\"] = \"SHA256\";\n  return ChecksumAlgorithm3;\n})(ChecksumAlgorithm || {});\nvar ChecksumLocation = /* @__PURE__ */ ((ChecksumLocation2) => {\n  ChecksumLocation2[\"HEADER\"] = \"header\";\n  ChecksumLocation2[\"TRAILER\"] = \"trailer\";\n  return ChecksumLocation2;\n})(ChecksumLocation || {});\nvar DEFAULT_CHECKSUM_ALGORITHM = \"CRC32\" /* CRC32 */;\n\n// src/stringUnionSelector.ts\nvar stringUnionSelector = /* @__PURE__ */ __name((obj, key, union, type) => {\n  if (!(key in obj))\n    return void 0;\n  const value = obj[key].toUpperCase();\n  if (!Object.values(union).includes(value)) {\n    throw new TypeError(`Cannot load ${type} '${key}'. Expected one of ${Object.values(union)}, got '${obj[key]}'.`);\n  }\n  return value;\n}, \"stringUnionSelector\");\n\n// src/NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS.ts\nvar ENV_REQUEST_CHECKSUM_CALCULATION = \"AWS_REQUEST_CHECKSUM_CALCULATION\";\nvar CONFIG_REQUEST_CHECKSUM_CALCULATION = \"request_checksum_calculation\";\nvar NODE_REQUEST_CHECKSUM_CALCULATION_CONFIG_OPTIONS = {\n  environmentVariableSelector: (env) => stringUnionSelector(env, ENV_REQUEST_CHECKSUM_CALCULATION, RequestChecksumCalculation, \"env\" /* ENV */),\n  configFileSelector: (profile) => stringUnionSelector(profile, CONFIG_REQUEST_CHECKSUM_CALCULATION, RequestChecksumCalculation, \"shared config entry\" /* CONFIG */),\n  default: DEFAULT_REQUEST_CHECKSUM_CALCULATION\n};\n\n// src/NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS.ts\nvar ENV_RESPONSE_CHECKSUM_VALIDATION = \"AWS_RESPONSE_CHECKSUM_VALIDATION\";\nvar CONFIG_RESPONSE_CHECKSUM_VALIDATION = \"response_checksum_validation\";\nvar NODE_RESPONSE_CHECKSUM_VALIDATION_CONFIG_OPTIONS = {\n  environmentVariableSelector: (env) => stringUnionSelector(env, ENV_RESPONSE_CHECKSUM_VALIDATION, ResponseChecksumValidation, \"env\" /* ENV */),\n  configFileSelector: (profile) => stringUnionSelector(profile, CONFIG_RESPONSE_CHECKSUM_VALIDATION, ResponseChecksumValidation, \"shared config entry\" /* CONFIG */),\n  default: DEFAULT_RESPONSE_CHECKSUM_VALIDATION\n};\n\n// src/crc64-nvme-crt-container.ts\nvar crc64NvmeCrtContainer = {\n  CrtCrc64Nvme: null\n};\n\n// src/flexibleChecksumsMiddleware.ts\nvar import_core = __webpack_require__(/*! @aws-sdk/core */ \"(rsc)/./node_modules/.pnpm/@aws-sdk+core@3.750.0/node_modules/@aws-sdk/core/dist-es/index.js\");\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/.pnpm/@smithy+protocol-http@5.0.1/node_modules/@smithy/protocol-http/dist-es/index.js\");\nvar import_util_stream = __webpack_require__(/*! @smithy/util-stream */ \"(rsc)/./node_modules/.pnpm/@smithy+util-stream@4.1.1/node_modules/@smithy/util-stream/dist-es/index.js\");\n\n// src/types.ts\nvar CLIENT_SUPPORTED_ALGORITHMS = [\n  \"CRC32\" /* CRC32 */,\n  \"CRC32C\" /* CRC32C */,\n  \"CRC64NVME\" /* CRC64NVME */,\n  \"SHA1\" /* SHA1 */,\n  \"SHA256\" /* SHA256 */\n];\nvar PRIORITY_ORDER_ALGORITHMS = [\n  \"SHA256\" /* SHA256 */,\n  \"SHA1\" /* SHA1 */,\n  \"CRC32\" /* CRC32 */,\n  \"CRC32C\" /* CRC32C */,\n  \"CRC64NVME\" /* CRC64NVME */\n];\n\n// src/getChecksumAlgorithmForRequest.ts\nvar getChecksumAlgorithmForRequest = /* @__PURE__ */ __name((input, { requestChecksumRequired, requestAlgorithmMember, requestChecksumCalculation }) => {\n  if (!requestAlgorithmMember) {\n    return requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired ? DEFAULT_CHECKSUM_ALGORITHM : void 0;\n  }\n  if (!input[requestAlgorithmMember]) {\n    return void 0;\n  }\n  const checksumAlgorithm = input[requestAlgorithmMember];\n  if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {\n    throw new Error(\n      `The checksum algorithm \"${checksumAlgorithm}\" is not supported by the client. Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`\n    );\n  }\n  return checksumAlgorithm;\n}, \"getChecksumAlgorithmForRequest\");\n\n// src/getChecksumLocationName.ts\nvar getChecksumLocationName = /* @__PURE__ */ __name((algorithm) => algorithm === \"MD5\" /* MD5 */ ? \"content-md5\" : `x-amz-checksum-${algorithm.toLowerCase()}`, \"getChecksumLocationName\");\n\n// src/hasHeader.ts\nvar hasHeader = /* @__PURE__ */ __name((header, headers) => {\n  const soughtHeader = header.toLowerCase();\n  for (const headerName of Object.keys(headers)) {\n    if (soughtHeader === headerName.toLowerCase()) {\n      return true;\n    }\n  }\n  return false;\n}, \"hasHeader\");\n\n// src/hasHeaderWithPrefix.ts\nvar hasHeaderWithPrefix = /* @__PURE__ */ __name((headerPrefix, headers) => {\n  const soughtHeaderPrefix = headerPrefix.toLowerCase();\n  for (const headerName of Object.keys(headers)) {\n    if (headerName.toLowerCase().startsWith(soughtHeaderPrefix)) {\n      return true;\n    }\n  }\n  return false;\n}, \"hasHeaderWithPrefix\");\n\n// src/isStreaming.ts\nvar import_is_array_buffer = __webpack_require__(/*! @smithy/is-array-buffer */ \"(rsc)/./node_modules/.pnpm/@smithy+is-array-buffer@4.0.0/node_modules/@smithy/is-array-buffer/dist-es/index.js\");\nvar isStreaming = /* @__PURE__ */ __name((body) => body !== void 0 && typeof body !== \"string\" && !ArrayBuffer.isView(body) && !(0, import_is_array_buffer.isArrayBuffer)(body), \"isStreaming\");\n\n// src/selectChecksumAlgorithmFunction.ts\nvar import_crc32c = __webpack_require__(/*! @aws-crypto/crc32c */ \"(rsc)/./node_modules/.pnpm/@aws-crypto+crc32c@5.2.0/node_modules/@aws-crypto/crc32c/build/module/index.js\");\nvar import_getCrc32ChecksumAlgorithmFunction = __webpack_require__(/*! ././getCrc32ChecksumAlgorithmFunction */ \"(rsc)/./node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.750.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getCrc32ChecksumAlgorithmFunction.js\");\nvar selectChecksumAlgorithmFunction = /* @__PURE__ */ __name((checksumAlgorithm, config) => {\n  switch (checksumAlgorithm) {\n    case \"MD5\" /* MD5 */:\n      return config.md5;\n    case \"CRC32\" /* CRC32 */:\n      return (0, import_getCrc32ChecksumAlgorithmFunction.getCrc32ChecksumAlgorithmFunction)();\n    case \"CRC32C\" /* CRC32C */:\n      return import_crc32c.AwsCrc32c;\n    case \"CRC64NVME\" /* CRC64NVME */:\n      if (typeof crc64NvmeCrtContainer.CrtCrc64Nvme !== \"function\") {\n        throw new Error(\n          `Please check whether you have installed the \"@aws-sdk/crc64-nvme-crt\" package explicitly. \nYou must also register the package by calling [require(\"@aws-sdk/crc64-nvme-crt\");] or an ESM equivalent such as [import \"@aws-sdk/crc64-nvme-crt\";]. \nFor more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`\n        );\n      }\n      return crc64NvmeCrtContainer.CrtCrc64Nvme;\n    case \"SHA1\" /* SHA1 */:\n      return config.sha1;\n    case \"SHA256\" /* SHA256 */:\n      return config.sha256;\n    default:\n      throw new Error(`Unsupported checksum algorithm: ${checksumAlgorithm}`);\n  }\n}, \"selectChecksumAlgorithmFunction\");\n\n// src/stringHasher.ts\nvar import_util_utf8 = __webpack_require__(/*! @smithy/util-utf8 */ \"(rsc)/./node_modules/.pnpm/@smithy+util-utf8@4.0.0/node_modules/@smithy/util-utf8/dist-es/index.js\");\nvar stringHasher = /* @__PURE__ */ __name((checksumAlgorithmFn, body) => {\n  const hash = new checksumAlgorithmFn();\n  hash.update((0, import_util_utf8.toUint8Array)(body || \"\"));\n  return hash.digest();\n}, \"stringHasher\");\n\n// src/flexibleChecksumsMiddleware.ts\nvar flexibleChecksumsMiddlewareOptions = {\n  name: \"flexibleChecksumsMiddleware\",\n  step: \"build\",\n  tags: [\"BODY_CHECKSUM\"],\n  override: true\n};\nvar flexibleChecksumsMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {\n  if (!import_protocol_http.HttpRequest.isInstance(args.request)) {\n    return next(args);\n  }\n  if (hasHeaderWithPrefix(\"x-amz-checksum-\", args.request.headers)) {\n    return next(args);\n  }\n  const { request, input } = args;\n  const { body: requestBody, headers } = request;\n  const { base64Encoder, streamHasher } = config;\n  const { requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;\n  const requestChecksumCalculation = await config.requestChecksumCalculation();\n  const requestAlgorithmMemberName = requestAlgorithmMember?.name;\n  const requestAlgorithmMemberHttpHeader = requestAlgorithmMember?.httpHeader;\n  if (requestAlgorithmMemberName && !input[requestAlgorithmMemberName]) {\n    if (requestChecksumCalculation === RequestChecksumCalculation.WHEN_SUPPORTED || requestChecksumRequired) {\n      input[requestAlgorithmMemberName] = DEFAULT_CHECKSUM_ALGORITHM;\n      if (requestAlgorithmMemberHttpHeader) {\n        headers[requestAlgorithmMemberHttpHeader] = DEFAULT_CHECKSUM_ALGORITHM;\n      }\n    }\n  }\n  const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {\n    requestChecksumRequired,\n    requestAlgorithmMember: requestAlgorithmMember?.name,\n    requestChecksumCalculation\n  });\n  let updatedBody = requestBody;\n  let updatedHeaders = headers;\n  if (checksumAlgorithm) {\n    switch (checksumAlgorithm) {\n      case \"CRC32\" /* CRC32 */:\n        (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_REQ_CRC32\", \"U\");\n        break;\n      case \"CRC32C\" /* CRC32C */:\n        (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_REQ_CRC32C\", \"V\");\n        break;\n      case \"CRC64NVME\" /* CRC64NVME */:\n        (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_REQ_CRC64\", \"W\");\n        break;\n      case \"SHA1\" /* SHA1 */:\n        (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_REQ_SHA1\", \"X\");\n        break;\n      case \"SHA256\" /* SHA256 */:\n        (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_REQ_SHA256\", \"Y\");\n        break;\n    }\n    const checksumLocationName = getChecksumLocationName(checksumAlgorithm);\n    const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);\n    if (isStreaming(requestBody)) {\n      const { getAwsChunkedEncodingStream, bodyLengthChecker } = config;\n      updatedBody = getAwsChunkedEncodingStream(\n        typeof config.requestStreamBufferSize === \"number\" && config.requestStreamBufferSize >= 8 * 1024 ? (0, import_util_stream.createBufferedReadable)(requestBody, config.requestStreamBufferSize, context.logger) : requestBody,\n        {\n          base64Encoder,\n          bodyLengthChecker,\n          checksumLocationName,\n          checksumAlgorithmFn,\n          streamHasher\n        }\n      );\n      updatedHeaders = {\n        ...headers,\n        \"content-encoding\": headers[\"content-encoding\"] ? `${headers[\"content-encoding\"]},aws-chunked` : \"aws-chunked\",\n        \"transfer-encoding\": \"chunked\",\n        \"x-amz-decoded-content-length\": headers[\"content-length\"],\n        \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\",\n        \"x-amz-trailer\": checksumLocationName\n      };\n      delete updatedHeaders[\"content-length\"];\n    } else if (!hasHeader(checksumLocationName, headers)) {\n      const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);\n      updatedHeaders = {\n        ...headers,\n        [checksumLocationName]: base64Encoder(rawChecksum)\n      };\n    }\n  }\n  const result = await next({\n    ...args,\n    request: {\n      ...request,\n      headers: updatedHeaders,\n      body: updatedBody\n    }\n  });\n  return result;\n}, \"flexibleChecksumsMiddleware\");\n\n// src/flexibleChecksumsInputMiddleware.ts\n\nvar flexibleChecksumsInputMiddlewareOptions = {\n  name: \"flexibleChecksumsInputMiddleware\",\n  toMiddleware: \"serializerMiddleware\",\n  relation: \"before\",\n  tags: [\"BODY_CHECKSUM\"],\n  override: true\n};\nvar flexibleChecksumsInputMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {\n  const input = args.input;\n  const { requestValidationModeMember } = middlewareConfig;\n  const requestChecksumCalculation = await config.requestChecksumCalculation();\n  const responseChecksumValidation = await config.responseChecksumValidation();\n  switch (requestChecksumCalculation) {\n    case RequestChecksumCalculation.WHEN_REQUIRED:\n      (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_REQ_WHEN_REQUIRED\", \"a\");\n      break;\n    case RequestChecksumCalculation.WHEN_SUPPORTED:\n      (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_REQ_WHEN_SUPPORTED\", \"Z\");\n      break;\n  }\n  switch (responseChecksumValidation) {\n    case ResponseChecksumValidation.WHEN_REQUIRED:\n      (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_RES_WHEN_REQUIRED\", \"c\");\n      break;\n    case ResponseChecksumValidation.WHEN_SUPPORTED:\n      (0, import_core.setFeature)(context, \"FLEXIBLE_CHECKSUMS_RES_WHEN_SUPPORTED\", \"b\");\n      break;\n  }\n  if (requestValidationModeMember && !input[requestValidationModeMember]) {\n    if (responseChecksumValidation === ResponseChecksumValidation.WHEN_SUPPORTED) {\n      input[requestValidationModeMember] = \"ENABLED\";\n    }\n  }\n  return next(args);\n}, \"flexibleChecksumsInputMiddleware\");\n\n// src/flexibleChecksumsResponseMiddleware.ts\n\n\n// src/getChecksumAlgorithmListForResponse.ts\nvar getChecksumAlgorithmListForResponse = /* @__PURE__ */ __name((responseAlgorithms = []) => {\n  const validChecksumAlgorithms = [];\n  for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {\n    if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {\n      continue;\n    }\n    validChecksumAlgorithms.push(algorithm);\n  }\n  return validChecksumAlgorithms;\n}, \"getChecksumAlgorithmListForResponse\");\n\n// src/isChecksumWithPartNumber.ts\nvar isChecksumWithPartNumber = /* @__PURE__ */ __name((checksum) => {\n  const lastHyphenIndex = checksum.lastIndexOf(\"-\");\n  if (lastHyphenIndex !== -1) {\n    const numberPart = checksum.slice(lastHyphenIndex + 1);\n    if (!numberPart.startsWith(\"0\")) {\n      const number = parseInt(numberPart, 10);\n      if (!isNaN(number) && number >= 1 && number <= 1e4) {\n        return true;\n      }\n    }\n  }\n  return false;\n}, \"isChecksumWithPartNumber\");\n\n// src/validateChecksumFromResponse.ts\n\n\n// src/getChecksum.ts\nvar getChecksum = /* @__PURE__ */ __name(async (body, { checksumAlgorithmFn, base64Encoder }) => base64Encoder(await stringHasher(checksumAlgorithmFn, body)), \"getChecksum\");\n\n// src/validateChecksumFromResponse.ts\nvar validateChecksumFromResponse = /* @__PURE__ */ __name(async (response, { config, responseAlgorithms, logger }) => {\n  const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);\n  const { body: responseBody, headers: responseHeaders } = response;\n  for (const algorithm of checksumAlgorithms) {\n    const responseHeader = getChecksumLocationName(algorithm);\n    const checksumFromResponse = responseHeaders[responseHeader];\n    if (checksumFromResponse) {\n      let checksumAlgorithmFn;\n      try {\n        checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);\n      } catch (error) {\n        if (algorithm === \"CRC64NVME\" /* CRC64NVME */) {\n          logger?.warn(`Skipping ${\"CRC64NVME\" /* CRC64NVME */} checksum validation: ${error.message}`);\n          continue;\n        }\n        throw error;\n      }\n      const { base64Encoder } = config;\n      if (isStreaming(responseBody)) {\n        response.body = (0, import_util_stream.createChecksumStream)({\n          expectedChecksum: checksumFromResponse,\n          checksumSourceLocation: responseHeader,\n          checksum: new checksumAlgorithmFn(),\n          source: responseBody,\n          base64Encoder\n        });\n        return;\n      }\n      const checksum = await getChecksum(responseBody, { checksumAlgorithmFn, base64Encoder });\n      if (checksum === checksumFromResponse) {\n        break;\n      }\n      throw new Error(\n        `Checksum mismatch: expected \"${checksum}\" but received \"${checksumFromResponse}\" in response header \"${responseHeader}\".`\n      );\n    }\n  }\n}, \"validateChecksumFromResponse\");\n\n// src/flexibleChecksumsResponseMiddleware.ts\nvar flexibleChecksumsResponseMiddlewareOptions = {\n  name: \"flexibleChecksumsResponseMiddleware\",\n  toMiddleware: \"deserializerMiddleware\",\n  relation: \"after\",\n  tags: [\"BODY_CHECKSUM\"],\n  override: true\n};\nvar flexibleChecksumsResponseMiddleware = /* @__PURE__ */ __name((config, middlewareConfig) => (next, context) => async (args) => {\n  if (!import_protocol_http.HttpRequest.isInstance(args.request)) {\n    return next(args);\n  }\n  const input = args.input;\n  const result = await next(args);\n  const response = result.response;\n  const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;\n  if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n    const { clientName, commandName } = context;\n    const isS3WholeObjectMultipartGetResponseChecksum = clientName === \"S3Client\" && commandName === \"GetObjectCommand\" && getChecksumAlgorithmListForResponse(responseAlgorithms).every((algorithm) => {\n      const responseHeader = getChecksumLocationName(algorithm);\n      const checksumFromResponse = response.headers[responseHeader];\n      return !checksumFromResponse || isChecksumWithPartNumber(checksumFromResponse);\n    });\n    if (isS3WholeObjectMultipartGetResponseChecksum) {\n      return result;\n    }\n    await validateChecksumFromResponse(response, {\n      config,\n      responseAlgorithms,\n      logger: context.logger\n    });\n  }\n  return result;\n}, \"flexibleChecksumsResponseMiddleware\");\n\n// src/getFlexibleChecksumsPlugin.ts\nvar getFlexibleChecksumsPlugin = /* @__PURE__ */ __name((config, middlewareConfig) => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(flexibleChecksumsMiddleware(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);\n    clientStack.addRelativeTo(\n      flexibleChecksumsInputMiddleware(config, middlewareConfig),\n      flexibleChecksumsInputMiddlewareOptions\n    );\n    clientStack.addRelativeTo(\n      flexibleChecksumsResponseMiddleware(config, middlewareConfig),\n      flexibleChecksumsResponseMiddlewareOptions\n    );\n  }\n}), \"getFlexibleChecksumsPlugin\");\n\n// src/resolveFlexibleChecksumsConfig.ts\nvar import_util_middleware = __webpack_require__(/*! @smithy/util-middleware */ \"(rsc)/./node_modules/.pnpm/@smithy+util-middleware@4.0.1/node_modules/@smithy/util-middleware/dist-es/index.js\");\nvar resolveFlexibleChecksumsConfig = /* @__PURE__ */ __name((input) => ({\n  ...input,\n  requestChecksumCalculation: (0, import_util_middleware.normalizeProvider)(\n    input.requestChecksumCalculation ?? DEFAULT_REQUEST_CHECKSUM_CALCULATION\n  ),\n  responseChecksumValidation: (0, import_util_middleware.normalizeProvider)(\n    input.responseChecksumValidation ?? DEFAULT_RESPONSE_CHECKSUM_VALIDATION\n  ),\n  requestStreamBufferSize: Number(input.requestStreamBufferSize ?? 0)\n}), \"resolveFlexibleChecksumsConfig\");\n// Annotate the CommonJS export names for ESM import in node:\n\n0 && (0);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@aws-sdk+middleware-flexible-checksums@3.750.0/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js\n");

/***/ })

};
;