"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres-date@1.0.7";
exports.ids = ["vendor-chunks/postgres-date@1.0.7"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/postgres-date@1.0.7/node_modules/postgres-date/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/postgres-date@1.0.7/node_modules/postgres-date/index.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vcG9zdGdyZXMtZGF0ZUAxLjAuNy9ub2RlX21vZHVsZXMvcG9zdGdyZXMtZGF0ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixxQkFBcUIsR0FBRyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRztBQUMxRSxpQkFBaUIsR0FBRyxNQUFNLEVBQUUsTUFBTSxFQUFFO0FBQ3BDLDRCQUE0QixFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUU7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy90b3NoL0RvY3VtZW50cy9QbGF0Zm9ybUlPL1Byb2plY3RzL3N0cmFwaTUvbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzLWRhdGVAMS4wLjcvbm9kZV9tb2R1bGVzL3Bvc3RncmVzLWRhdGUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciBEQVRFX1RJTUUgPSAvKFxcZHsxLH0pLShcXGR7Mn0pLShcXGR7Mn0pIChcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pKFxcLlxcZHsxLH0pPy4qPyggQkMpPyQvXG52YXIgREFURSA9IC9eKFxcZHsxLH0pLShcXGR7Mn0pLShcXGR7Mn0pKCBCQyk/JC9cbnZhciBUSU1FX1pPTkUgPSAvKFtaKy1dKShcXGR7Mn0pPzo/KFxcZHsyfSk/Oj8oXFxkezJ9KT8vXG52YXIgSU5GSU5JVFkgPSAvXi0/aW5maW5pdHkkL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlRGF0ZSAoaXNvRGF0ZSkge1xuICBpZiAoSU5GSU5JVFkudGVzdChpc29EYXRlKSkge1xuICAgIC8vIENhcGl0YWxpemUgdG8gSW5maW5pdHkgYmVmb3JlIHBhc3NpbmcgdG8gTnVtYmVyXG4gICAgcmV0dXJuIE51bWJlcihpc29EYXRlLnJlcGxhY2UoJ2knLCAnSScpKVxuICB9XG4gIHZhciBtYXRjaGVzID0gREFURV9USU1FLmV4ZWMoaXNvRGF0ZSlcblxuICBpZiAoIW1hdGNoZXMpIHtcbiAgICAvLyBGb3JjZSBZWVlZLU1NLUREIGRhdGVzIHRvIGJlIHBhcnNlZCBhcyBsb2NhbCB0aW1lXG4gICAgcmV0dXJuIGdldERhdGUoaXNvRGF0ZSkgfHwgbnVsbFxuICB9XG5cbiAgdmFyIGlzQkMgPSAhIW1hdGNoZXNbOF1cbiAgdmFyIHllYXIgPSBwYXJzZUludChtYXRjaGVzWzFdLCAxMClcbiAgaWYgKGlzQkMpIHtcbiAgICB5ZWFyID0gYmNZZWFyVG9OZWdhdGl2ZVllYXIoeWVhcilcbiAgfVxuXG4gIHZhciBtb250aCA9IHBhcnNlSW50KG1hdGNoZXNbMl0sIDEwKSAtIDFcbiAgdmFyIGRheSA9IG1hdGNoZXNbM11cbiAgdmFyIGhvdXIgPSBwYXJzZUludChtYXRjaGVzWzRdLCAxMClcbiAgdmFyIG1pbnV0ZSA9IHBhcnNlSW50KG1hdGNoZXNbNV0sIDEwKVxuICB2YXIgc2Vjb25kID0gcGFyc2VJbnQobWF0Y2hlc1s2XSwgMTApXG5cbiAgdmFyIG1zID0gbWF0Y2hlc1s3XVxuICBtcyA9IG1zID8gMTAwMCAqIHBhcnNlRmxvYXQobXMpIDogMFxuXG4gIHZhciBkYXRlXG4gIHZhciBvZmZzZXQgPSB0aW1lWm9uZU9mZnNldChpc29EYXRlKVxuICBpZiAob2Zmc2V0ICE9IG51bGwpIHtcbiAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1zKSlcblxuICAgIC8vIEFjY291bnQgZm9yIHllYXJzIGZyb20gMCB0byA5OSBiZWluZyBpbnRlcnByZXRlZCBhcyAxOTAwLTE5OTlcbiAgICAvLyBieSBEYXRlLlVUQyAvIHRoZSBtdWx0aS1hcmd1bWVudCBmb3JtIG9mIHRoZSBEYXRlIGNvbnN0cnVjdG9yXG4gICAgaWYgKGlzMFRvOTkoeWVhcikpIHtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhcilcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgLSBvZmZzZXQpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbXMpXG5cbiAgICBpZiAoaXMwVG85OSh5ZWFyKSkge1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRlXG59XG5cbmZ1bmN0aW9uIGdldERhdGUgKGlzb0RhdGUpIHtcbiAgdmFyIG1hdGNoZXMgPSBEQVRFLmV4ZWMoaXNvRGF0ZSlcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgeWVhciA9IHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKVxuICB2YXIgaXNCQyA9ICEhbWF0Y2hlc1s0XVxuICBpZiAoaXNCQykge1xuICAgIHllYXIgPSBiY1llYXJUb05lZ2F0aXZlWWVhcih5ZWFyKVxuICB9XG5cbiAgdmFyIG1vbnRoID0gcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApIC0gMVxuICB2YXIgZGF5ID0gbWF0Y2hlc1szXVxuICAvLyBZWVlZLU1NLUREIHdpbGwgYmUgcGFyc2VkIGFzIGxvY2FsIHRpbWVcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5KVxuXG4gIGlmIChpczBUbzk5KHllYXIpKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyKVxuICB9XG5cbiAgcmV0dXJuIGRhdGVcbn1cblxuLy8gbWF0Y2ggdGltZXpvbmVzOlxuLy8gWiAoVVRDKVxuLy8gLTA1XG4vLyArMDY6MzBcbmZ1bmN0aW9uIHRpbWVab25lT2Zmc2V0IChpc29EYXRlKSB7XG4gIGlmIChpc29EYXRlLmVuZHNXaXRoKCcrMDAnKSkge1xuICAgIHJldHVybiAwXG4gIH1cblxuICB2YXIgem9uZSA9IFRJTUVfWk9ORS5leGVjKGlzb0RhdGUuc3BsaXQoJyAnKVsxXSlcbiAgaWYgKCF6b25lKSByZXR1cm5cbiAgdmFyIHR5cGUgPSB6b25lWzFdXG5cbiAgaWYgKHR5cGUgPT09ICdaJykge1xuICAgIHJldHVybiAwXG4gIH1cbiAgdmFyIHNpZ24gPSB0eXBlID09PSAnLScgPyAtMSA6IDFcbiAgdmFyIG9mZnNldCA9IHBhcnNlSW50KHpvbmVbMl0sIDEwKSAqIDM2MDAgK1xuICAgIHBhcnNlSW50KHpvbmVbM10gfHwgMCwgMTApICogNjAgK1xuICAgIHBhcnNlSW50KHpvbmVbNF0gfHwgMCwgMTApXG5cbiAgcmV0dXJuIG9mZnNldCAqIHNpZ24gKiAxMDAwXG59XG5cbmZ1bmN0aW9uIGJjWWVhclRvTmVnYXRpdmVZZWFyICh5ZWFyKSB7XG4gIC8vIEFjY291bnQgZm9yIG51bWVyaWNhbCBkaWZmZXJlbmNlIGJldHdlZW4gcmVwcmVzZW50YXRpb25zIG9mIEJDIHllYXJzXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlbmRydWNrZXIvcG9zdGdyZXMtZGF0ZS9pc3N1ZXMvNVxuICByZXR1cm4gLSh5ZWFyIC0gMSlcbn1cblxuZnVuY3Rpb24gaXMwVG85OSAobnVtKSB7XG4gIHJldHVybiBudW0gPj0gMCAmJiBudW0gPCAxMDBcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/postgres-date@1.0.7/node_modules/postgres-date/index.js\n");

/***/ })

};
;